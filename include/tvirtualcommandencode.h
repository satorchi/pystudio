// File generated by Dispatcher Wizard v  2.9.1.0.14 (07/02/2018)
#ifndef _TVIRTUALCOMMANDENCODE_H_
#define _TVIRTUALCOMMANDENCODE_H_

#define 		GPS_CUSTOMGPSCOMMAND_CMD_NUMBER 42
#define 		GPS_CUSTOMGPSCOMMAND_ID 1
#define 		PLATFORMMOTORS_CONFIGUREMOTORS_CMD_NUMBER 41
#define 		PLATFORMMOTORS_CONFIGUREMOTORS_ID 2
#define 		PLATFORMMOTORS_CONFIGUREELMOTOR_CMD_NUMBER 40
#define 		PLATFORMMOTORS_CONFIGUREELMOTOR_ID 1
#define 		PLATFORMMOTORS_CONFIGUREAZMOTOR_CMD_NUMBER 39
#define 		PLATFORMMOTORS_CONFIGUREAZMOTOR_ID 0
#define 		PLATFORMCONTROLER_CUSTOMCONTROLERMC405COMMAND_CMD_NUMBER 38
#define 		PLATFORMCONTROLER_CUSTOMCONTROLERMC405COMMAND_ID 1
#define 		CALIBSOURCES_CONFIGURELOWFREQUENCYSOURCE_CMD_NUMBER 37
#define 		CALIBSOURCES_CONFIGURELOWFREQUENCYSOURCE_ID 3
#define 		CALIBSOURCES_CONFIGUREHIGHFREQUENCYSOURCE_CMD_NUMBER 36
#define 		CALIBSOURCES_CONFIGUREHIGHFREQUENCYSOURCE_ID 2
#define 		CALIBSOURCES_CUSTOMCALIBSOURCESCOMMAND_CMD_NUMBER 35
#define 		CALIBSOURCES_CUSTOMCALIBSOURCESCOMMAND_ID 1
#define 		HWP_HWPCOMMAND_CMD_NUMBER 34
#define 		HWP_HWPCOMMAND_ID 1
#define 		MGC3_TOMGC3_CMD_NUMBER 33
#define 		MGC3_TOMGC3_ID 0
#define 		MMR3_TOMMR3_CMD_NUMBER 32
#define 		MMR3_TOMMR3_ID 0
#define 		CFIBERS_CONFIGURECFIBERS_CMD_NUMBER 31
#define 		CFIBERS_CONFIGURECFIBERS_ID 1
#define 		SWITCHES_SWITCHESMSG_CMD_NUMBER 30
#define 		SWITCHES_SWITCHESMSG_ID 0
#define 		MULTINETQUICMANAGER_SETHEATERRELAY_CMD_NUMBER 29
#define 		MULTINETQUICMANAGER_SETHEATERRELAY_ID 62
#define 		MULTINETQUICMANAGER_SETFEEDBACKRELAY_CMD_NUMBER 28
#define 		MULTINETQUICMANAGER_SETFEEDBACKRELAY_ID 61
#define 		MULTINETQUICMANAGER_ACTIVATEPID_CMD_NUMBER 27
#define 		MULTINETQUICMANAGER_ACTIVATEPID_ID 22
#define 		MULTINETQUICMANAGER_CONFIGUREPID_CMD_NUMBER 26
#define 		MULTINETQUICMANAGER_CONFIGUREPID_ID 21
#define 		MULTINETQUICMANAGER_SETFEEDBACKDAC_CMD_NUMBER 25
#define 		MULTINETQUICMANAGER_SETFEEDBACKDAC_ID 19
#define 		MULTINETQUICMANAGER_SETTESDAC_CMD_NUMBER 24
#define 		MULTINETQUICMANAGER_SETTESDAC_ID 18
#define 		MULTINETQUICMANAGER_SETASICSERIALLINKFREQUENCY_CMD_NUMBER 23
#define 		MULTINETQUICMANAGER_SETASICSERIALLINKFREQUENCY_ID 16
#define 		MULTINETQUICMANAGER_GETSTATUS_CMD_NUMBER 22
#define 		MULTINETQUICMANAGER_GETSTATUS_ID 14
#define 		MULTINETQUICMANAGER_SETASICCONF_CMD_NUMBER 21
#define 		MULTINETQUICMANAGER_SETASICCONF_ID 13
#define 		MULTINETQUICMANAGER_SETCYCLERAWMODE_CMD_NUMBER 20
#define 		MULTINETQUICMANAGER_SETCYCLERAWMODE_ID 11
#define 		MULTINETQUICMANAGER_RESETNETQUIC_CMD_NUMBER 19
#define 		MULTINETQUICMANAGER_RESETNETQUIC_ID 10
#define 		MULTINETQUICMANAGER_SETACQMODE_CMD_NUMBER 18
#define 		MULTINETQUICMANAGER_SETACQMODE_ID 9
#define 		MULTINETQUICMANAGER_STOPACQ_CMD_NUMBER 17
#define 		MULTINETQUICMANAGER_STOPACQ_ID 7
#define 		MULTINETQUICMANAGER_STARTACQ_CMD_NUMBER 16
#define 		MULTINETQUICMANAGER_STARTACQ_ID 6
#define 		MULTINETQUICMANAGER_SETNSAMPLE_CMD_NUMBER 15
#define 		MULTINETQUICMANAGER_SETNSAMPLE_ID 5
#define 		MULTINETQUICMANAGER_SETMASK_CMD_NUMBER 14
#define 		MULTINETQUICMANAGER_SETMASK_ID 3
#define 		MULTINETQUICMANAGER_SETOFFSETTABLE_CMD_NUMBER 13
#define 		MULTINETQUICMANAGER_SETOFFSETTABLE_ID 20
#define 		MULTINETQUICMANAGER_SETFEEDBACKTABLE_CMD_NUMBER 12
#define 		MULTINETQUICMANAGER_SETFEEDBACKTABLE_ID 1
#define 		MULTINETQUICMANAGER_SETASICINIB_CMD_NUMBER 11
#define 		MULTINETQUICMANAGER_SETASICINIB_ID 60
#define 		MULTINETQUICMANAGER_SETASICRAZB_CMD_NUMBER 10
#define 		MULTINETQUICMANAGER_SETASICRAZB_ID 59
#define 		MULTINETQUICMANAGER_SETASICSELLASTROW_CMD_NUMBER 9
#define 		MULTINETQUICMANAGER_SETASICSELLASTROW_ID 57
#define 		MULTINETQUICMANAGER_SETASICSELSTARTROW_CMD_NUMBER 8
#define 		MULTINETQUICMANAGER_SETASICSELSTARTROW_ID 56
#define 		MULTINETQUICMANAGER_SETASICSETCOLUMN_CMD_NUMBER 7
#define 		MULTINETQUICMANAGER_SETASICSETCOLUMN_ID 55
#define 		MULTINETQUICMANAGER_SETASICVOCM_CMD_NUMBER 6
#define 		MULTINETQUICMANAGER_SETASICVOCM_ID 54
#define 		MULTINETQUICMANAGER_SETASICVICM_CMD_NUMBER 5
#define 		MULTINETQUICMANAGER_SETASICVICM_ID 53
#define 		MULTINETQUICMANAGER_SETASICSPOL_CMD_NUMBER 4
#define 		MULTINETQUICMANAGER_SETASICSPOL_ID 52
#define 		MULTINETQUICMANAGER_SETASICAPOL_CMD_NUMBER 3
#define 		MULTINETQUICMANAGER_SETASICAPOL_ID 51
#define 		MULTINETQUICMANAGER_SETASICPARAM_CMD_NUMBER 2
#define 		MULTINETQUICMANAGER_SETASICPARAM_ID 50
#define 		MULTINETQUICMANAGER_CUSTOMCOMMAND_CMD_NUMBER 1
#define 		MULTINETQUICMANAGER_CUSTOMCOMMAND_ID 40
#define 		DISP_RESETALLPARAMETERS_CMD_NUMBER 0
#define 		DISP_RESETALLPARAMETERS_ID 14
#define 		DISP_SETLOGBOOKBASEDIRECTORY_CMD_NUMBER 0
#define 		DISP_SETLOGBOOKBASEDIRECTORY_ID 13
#define 		DISP_SETLOGBOOKFILENAME_CMD_NUMBER 0
#define 		DISP_SETLOGBOOKFILENAME_ID 12
#define 		DISP_ADDTOLOGBOOK_CMD_NUMBER 0
#define 		DISP_ADDTOLOGBOOK_ID 11
#define 		DISP_RESETDECOMMUTATIONFLAGS_CMD_NUMBER 0
#define 		DISP_RESETDECOMMUTATIONFLAGS_ID 10
#define 		DISP_RESETSUBSYSTEM_CMD_NUMBER 0
#define 		DISP_RESETSUBSYSTEM_ID 9
#define 		DISP_SETBACKUPDIR_CMD_NUMBER 0
#define 		DISP_SETBACKUPDIR_ID 8
#define 		DISP_RELOADTF_CMD_NUMBER 0
#define 		DISP_RELOADTF_ID 7
#define 		DISP_STOPBACKUP_CMD_NUMBER 0
#define 		DISP_STOPBACKUP_ID 5
#define 		DISP_STARTBACKUP_CMD_NUMBER 0
#define 		DISP_STARTBACKUP_ID 4
#define 		DISP_SETSCIENTIFICDATATFUSED_CMD_NUMBER 0
#define 		DISP_SETSCIENTIFICDATATFUSED_ID 7
#define 		DISP_SETVOUT2IINSCOEFFS_CMD_NUMBER 0
#define 		DISP_SETVOUT2IINSCOEFFS_ID 6
#define 		DISP_SETVOUT2IINCOEFFS_CMD_NUMBER 0
#define 		DISP_SETVOUT2IINCOEFFS_ID 5
#define 		DISP_RESETVOUT2IINCOEFFS_CMD_NUMBER 0
#define 		DISP_RESETVOUT2IINCOEFFS_ID 4
#define 		DISP_SETVOFFSETS_CMD_NUMBER 0
#define 		DISP_SETVOFFSETS_ID 3
#define 		DISP_SETVOFFSET_CMD_NUMBER 0
#define 		DISP_SETVOFFSET_ID 2
#define 		DISP_RESETVOFFSET_CMD_NUMBER 0
#define 		DISP_RESETVOFFSET_ID 1


#include "customdispatcher.h"
#include <QString>
#include "qdispatchertcbytearray.h"

class TVirtualCommandEncode
{
public :
TVirtualCommandEncode();
virtual ~TVirtualCommandEncode();

virtual void buildSubsystemTcEOP(QDispatcherTCByteArray *currentTC, quint8 subsysID, quint16 commandNum) = 0;
virtual void buildSubsystemTcHeader(QDispatcherTCByteArray *currentTC, quint8 subsysID,quint16 commandNum, quint32 dataFieldSize) = 0;
virtual bool sendSubsystemTC(QString tcName, quint8 subsysID,quint16 tcID) = 0;
virtual bool sendCustomTC(QString tcName) = 0;
virtual bool sendInternTC(QString tcName) = 0;
virtual QDispatcherTCByteArray* startNewCustomTC(quint16 customTmNum) = 0 ;
virtual QDispatcherTCByteArray* startNewInternTC(quint16 customTmNum) = 0 ;
virtual QDispatcherTCByteArray* startNewSubsystemTC(quint8 subsysID, quint16 tcID) = 0;

/** \@brief Encodes the ResetVOffset command and sends it.
 * 
 * Builds the ResetVOffset command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetVOffset(quint32 asicNum);

/** \@brief Encodes the SetVOffset command and sends it.
 * 
 * Builds the SetVOffset command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] pixelNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] voffset TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVOffset(quint32 asicNum , quint8 pixelNum , float voffset);

/** \@brief Encodes the SetVOffsets command and sends it.
 * 
 * Builds the SetVOffsets command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] voffset TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVOffsets(quint32 asicNum , float *voffset);

/** \@brief Encodes the ResetVout2IinCoeffs command and sends it.
 * 
 * Builds the ResetVout2IinCoeffs command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetVout2IinCoeffs(quint32 asicNum);

/** \@brief Encodes the SetVout2IinCoeffs command and sends it.
 * 
 * Builds the SetVout2IinCoeffs command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] MinMfb TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] Rfb TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVout2IinCoeffs(quint32 asicNum , float MinMfb , float Rfb);

/** \@brief Encodes the SetVout2IinsCoeffs command and sends it.
 * 
 * Builds the SetVout2IinsCoeffs command with the given parameters.Sends it.
 * \@param [in] MinMfb TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] Rfb TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVout2IinsCoeffs(float *MinMfb , float *Rfb);

/** \@brief Encodes the SetScientificDataTfUsed command and sends it.
 * 
 * Builds the SetScientificDataTfUsed command with the given parameters.Sends it.
 * \@param [in] tfused TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetScientificDataTfUsed(quint8 tfused);

/** \@brief Encodes the StartBackup command and sends it.
 * 
 * Builds the StartBackup command with the given parameters.Sends it.
 * \@param [in] backupsId TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] sessionName TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] comment TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartBackup(quint16 backupsId , QString sessionName , QString comment);

/** \@brief Encodes the StopBackup command and sends it.
 * 
 * Builds the StopBackup command with the given parameters.Sends it.
 * \@param [in] backupsId TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStopBackup(quint16 backupsId);

/** \@brief Encodes the ReloadTF command and sends it.
 * 
 * Builds the ReloadTF command with the given parameters.Sends it.
 */
bool sendReloadTF();

/** \@brief Encodes the SetBackupDir command and sends it.
 * 
 * Builds the SetBackupDir command with the given parameters.Sends it.
 * \@param [in] directory TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetBackupDir(QString directory);

/** \@brief Encodes the ResetSubsystem command and sends it.
 * 
 * Builds the ResetSubsystem command with the given parameters.Sends it.
 * \@param [in] subsystemId TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetSubsystem(quint8 subsystemId);

/** \@brief Encodes the ResetDecommutationFlags command and sends it.
 * 
 * Builds the ResetDecommutationFlags command with the given parameters.Sends it.
 * \@param [in] subsytemId TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetDecommutationFlags(quint8 subsytemId);

/** \@brief Encodes the AddToLogbook command and sends it.
 * 
 * Builds the AddToLogbook command with the given parameters.Sends it.
 * \@param [in] key TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] comment TBWTBWTBWTBWTBWTBWTBW
 */
bool sendAddToLogbook(QString key , QString comment);

/** \@brief Encodes the SetLogBookFilename command and sends it.
 * 
 * Builds the SetLogBookFilename command with the given parameters.Sends it.
 * \@param [in] filename TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetLogBookFilename(QString filename);

/** \@brief Encodes the SetLogBookBaseDirectory command and sends it.
 * 
 * Builds the SetLogBookBaseDirectory command with the given parameters.Sends it.
 * \@param [in] directory TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetLogBookBaseDirectory(QString directory);

/** \@brief Encodes the ResetAllParameters command and sends it.
 * 
 * Builds the ResetAllParameters command with the given parameters.Sends it.
 */
bool sendResetAllParameters();

/** \@brief Encodes the CustomCommand command and sends it.
 * 
 * Builds the CustomCommand command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] id TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] cn TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] corps TBWTBWTBWTBWTBWTBWTBW
 */
bool sendCustomCommand(quint32 asicNum , quint8 id , quint8 cn , QByteArray corps);

/** \@brief Encodes the SetAsicParam command and sends it.
 * 
 * Builds the SetAsicParam command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] address TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicParam(quint32 asicNum , quint8 address , quint8 value);

/** \@brief Encodes the SetAsicApol command and sends it.
 * 
 * Builds the SetAsicApol command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicApol(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSpol command and sends it.
 * 
 * Builds the SetAsicSpol command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSpol(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicVicm command and sends it.
 * 
 * Builds the SetAsicVicm command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicVicm(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicVocm command and sends it.
 * 
 * Builds the SetAsicVocm command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicVocm(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSetColumn command and sends it.
 * 
 * Builds the SetAsicSetColumn command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] startStopCol TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSetColumn(quint32 asicNum , quint8 startStopCol);

/** \@brief Encodes the SetAsicSelStartRow command and sends it.
 * 
 * Builds the SetAsicSelStartRow command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSelStartRow(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSelLastRow command and sends it.
 * 
 * Builds the SetAsicSelLastRow command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSelLastRow(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicRazb command and sends it.
 * 
 * Builds the SetAsicRazb command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicRazb(quint32 asicNum);

/** \@brief Encodes the SetAsicInib command and sends it.
 * 
 * Builds the SetAsicInib command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicInib(quint32 asicNum);

/** \@brief Encodes the SetFeedbackTable command and sends it.
 * 
 * Builds the SetFeedbackTable command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] feedbackTable TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFeedbackTable(quint32 asicNum , quint16 *feedbackTable);

/** \@brief Encodes the SetOffsetTable command and sends it.
 * 
 * Builds the SetOffsetTable command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetTable TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetOffsetTable(quint32 asicNum , quint16 *offsetTable);

/** \@brief Encodes the SetMask command and sends it.
 * 
 * Builds the SetMask command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] mask TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetMask(quint32 asicNum , quint8 *mask);

/** \@brief Encodes the SetNSample command and sends it.
 * 
 * Builds the SetNSample command with the given parameters.Sends it.
 * \@param [in] Nsample TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetNSample(quint16 Nsample);

/** \@brief Encodes the StartAcq command and sends it.
 * 
 * Builds the StartAcq command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartAcq(quint32 asicNum);

/** \@brief Encodes the StopAcq command and sends it.
 * 
 * Builds the StopAcq command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStopAcq(quint32 asicNum);

/** \@brief Encodes the SetAcqMode command and sends it.
 * 
 * Builds the SetAcqMode command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] testMode TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAcqMode(quint32 asicNum , quint16 testMode);

/** \@brief Encodes the ResetNetquic command and sends it.
 * 
 * Builds the ResetNetquic command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetNetquic(quint32 asicNum);

/** \@brief Encodes the SetCycleRawMode command and sends it.
 * 
 * Builds the SetCycleRawMode command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] undersampling TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetCycleRawMode(quint32 asicNum , quint16 undersampling);

/** \@brief Encodes the SetAsicConf command and sends it.
 * 
 * Builds the SetAsicConf command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] signalId TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] state TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicConf(quint32 asicNum , quint8 signalId , quint8 state);

/** \@brief Encodes the GetStatus command and sends it.
 * 
 * Builds the GetStatus command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendGetStatus(quint32 asicNum);

/** \@brief Encodes the SetASICSerialLinkFrequency command and sends it.
 * 
 * Builds the SetASICSerialLinkFrequency command with the given parameters.Sends it.
 * \@param [in] serialFreq TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetASICSerialLinkFrequency(quint8 serialFreq);

/** \@brief Encodes the SetTESDAC command and sends it.
 * 
 * Builds the SetTESDAC command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] shape TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] amplitude TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetADU TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetTESDAC(quint32 asicNum , quint8 shape , quint8 frequency , quint16 amplitude , quint16 offsetADU);

/** \@brief Encodes the SetFeedbackDAC command and sends it.
 * 
 * Builds the SetFeedbackDAC command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] shape TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] amplitude TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetADU TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFeedbackDAC(quint32 asicNum , quint8 shape , quint8 frequency , quint16 amplitude , quint16 offsetADU);

/** \@brief Encodes the ConfigurePID command and sends it.
 * 
 * Builds the ConfigurePID command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] P TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] I TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] D TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigurePID(quint32 asicNum , quint16 P , quint16 I , quint16 D);

/** \@brief Encodes the ActivatePID command and sends it.
 * 
 * Builds the ActivatePID command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] onOff TBWTBWTBWTBWTBWTBWTBW
 */
bool sendActivatePID(quint32 asicNum , quint16 onOff);

/** \@brief Encodes the SetFeedbackRelay command and sends it.
 * 
 * Builds the SetFeedbackRelay command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] bitmask TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFeedbackRelay(quint32 asicNum , quint8 bitmask);

/** \@brief Encodes the SetHeaterRelay command and sends it.
 * 
 * Builds the SetHeaterRelay command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] bitmask TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetHeaterRelay(quint32 asicNum , quint8 bitmask);

/** \@brief Encodes the SwitchesMsg command and sends it.
 * 
 * Builds the SwitchesMsg command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSwitchesMsg(QString txtMsg);

/** \@brief Encodes the ConfigureCFibers command and sends it.
 * 
 * Builds the ConfigureCFibers command with the given parameters.Sends it.
 * \@param [in] periode TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] broche3State TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] broche4State TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] broche5State TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] ampFiber1 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetFiber1 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] durationFiber1 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] ampFiber2 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetFiber2 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] durationFiber2 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] ampFiber3 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetFiber3 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] durationFiber3 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] ampFiber4 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetFiber4 TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] durationFiber4 TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureCFibers(quint16 periode , quint8 broche3State , quint8 broche4State , quint8 broche5State , quint16 ampFiber1 , quint16 offsetFiber1 , quint16 durationFiber1 , quint16 ampFiber2 , quint16 offsetFiber2 , quint16 durationFiber2 , quint16 ampFiber3 , quint16 offsetFiber3 , quint16 durationFiber3 , quint16 ampFiber4 , quint16 offsetFiber4 , quint16 durationFiber4);

/** \@brief Encodes the ToMMR3 command and sends it.
 * 
 * Builds the ToMMR3 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToMMR3(QString txtMsg);

/** \@brief Encodes the ToMGC3 command and sends it.
 * 
 * Builds the ToMGC3 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToMGC3(QString txtMsg);

/** \@brief Encodes the HWPCommand command and sends it.
 * 
 * Builds the HWPCommand command with the given parameters.Sends it.
 * \@param [in] stringOrder TBWTBWTBWTBWTBWTBWTBW
 */
bool sendHWPCommand(QString stringOrder);

/** \@brief Encodes the CustomCALIBSOURCESCommand command and sends it.
 * 
 * Builds the CustomCALIBSOURCESCommand command with the given parameters.Sends it.
 * \@param [in] customArray TBWTBWTBWTBWTBWTBWTBW
 */
bool sendCustomCALIBSOURCESCommand(QByteArray customArray);

/** \@brief Encodes the ConfigureHighFrequencySource command and sends it.
 * 
 * Builds the ConfigureHighFrequencySource command with the given parameters.Sends it.
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureHighFrequencySource(double frequency);

/** \@brief Encodes the ConfigureLowFrequencySource command and sends it.
 * 
 * Builds the ConfigureLowFrequencySource command with the given parameters.Sends it.
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureLowFrequencySource(double frequency);

/** \@brief Encodes the CustomCONTROLERMC405Command command and sends it.
 * 
 * Builds the CustomCONTROLERMC405Command command with the given parameters.Sends it.
 * \@param [in] customArray TBWTBWTBWTBWTBWTBWTBW
 */
bool sendCustomCONTROLERMC405Command(QByteArray customArray);

/** \@brief Encodes the ConfigureAzMotor command and sends it.
 * 
 * Builds the ConfigureAzMotor command with the given parameters.Sends it.
 * \@param [in] msg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureAzMotor(QString msg);

/** \@brief Encodes the ConfigureElMotor command and sends it.
 * 
 * Builds the ConfigureElMotor command with the given parameters.Sends it.
 * \@param [in] msg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureElMotor(QString msg);

/** \@brief Encodes the ConfigureMotors command and sends it.
 * 
 * Builds the ConfigureMotors command with the given parameters.Sends it.
 * \@param [in] azMsg TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] elMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigureMotors(QString azMsg , QString elMsg);

/** \@brief Encodes the CustomGPSCommand command and sends it.
 * 
 * Builds the CustomGPSCommand command with the given parameters.Sends it.
 * \@param [in] customArray TBWTBWTBWTBWTBWTBWTBW
 */
bool sendCustomGPSCommand(QByteArray customArray);

};

#endif
