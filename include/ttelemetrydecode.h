//File generated by Dispatcher wizard v 2.9.1.0.14 (07/02/2018) .
//Generating date : jeu. avr. 5 17:19:32 2018

//---------------------------------------------------------------------------
#ifndef TTELEMETRYDECODE_H
#define TTELEMETRYDECODE_H
//---------------------------------------------------------------------------

#include "tparameters.h"
#include <QHash>
#include <QtEndian>

class TVirtualDecommutation;

class TTelemetryDecode
{
public:
    TTelemetryDecode(TVirtualDecommutation* decommutation,TParameters* Parameters);
    QHash<quint64, QList<quint32>* > decodedParametersPerTelemetry; /**< list of parameters per telemetry.*/
/** \@brief Decode the QUBIC_HK telemetry.
 *
 * Decode the 8 bits QUBIC_HK telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry QUBIC_HK telemetry buffer.
 */
	void decodeMULTINETQUICMANAGER_QUBIC_HK(quint8* telemetry);
/** \@brief Decode the QUBIC_SUM telemetry.
 *
 * Decode the 8 bits QUBIC_SUM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry QUBIC_SUM telemetry buffer.
 */
	void decodeMULTINETQUICMANAGER_QUBIC_SUM(quint8* telemetry);
/** \@brief Decode the QUBIC_RAW telemetry.
 *
 * Decode the 8 bits QUBIC_RAW telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry QUBIC_RAW telemetry buffer.
 */
	void decodeMULTINETQUICMANAGER_QUBIC_RAW(quint8* telemetry);
/** \@brief Decode the CFIBERS telemetry.
 *
 * Decode the 8 bits CFIBERS telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry CFIBERS telemetry buffer.
 */
	void decodeCFIBERS_CFIBERS(quint8*);
/** \@brief Decode the SWITCHES telemetry.
 *
 * Decode the 8 bits SWITCHES telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry SWITCHES telemetry buffer.
 */
	void decodeSWITCHES_SWITCHES(quint8*);
/** \@brief Decode the IMACRT1 telemetry.
 *
 * Decode the 8 bits IMACRT1 telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry IMACRT1 telemetry buffer.
 */
	void decodeIMACRT1_IMACRT1(quint8*);
/** \@brief Decode the IMACRT2 telemetry.
 *
 * Decode the 8 bits IMACRT2 telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry IMACRT2 telemetry buffer.
 */
	void decodeIMACRT2_IMACRT2(quint8*);
/** \@brief Decode the IMACRT3 telemetry.
 *
 * Decode the 8 bits IMACRT3 telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry IMACRT3 telemetry buffer.
 */
	void decodeIMACRT3_IMACRT3(quint8*);
/** \@brief Decode the IMACRT4 telemetry.
 *
 * Decode the 8 bits IMACRT4 telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry IMACRT4 telemetry buffer.
 */
	void decodeIMACRT4_IMACRT4(quint8*);
/** \@brief Decode the HWP_ACK telemetry.
 *
 * Decode the 8 bits HWP_ACK telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry HWP_ACK telemetry buffer.
 */
	void decodeHWP_HWP_ACK(quint8*);
/** \@brief Decode the HWP_DATA telemetry.
 *
 * Decode the 8 bits HWP_DATA telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry HWP_DATA telemetry buffer.
 */
	void decodeHWP_HWP_DATA(quint8*);
/** \@brief Decode the CALIBSRCFREQTM telemetry.
 *
 * Decode the 8 bits CALIBSRCFREQTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry CALIBSRCFREQTM telemetry buffer.
 */
	void decodeCALIBSOURCES_CALIBSRCFREQTM(quint8*);
/** \@brief Decode the CALIBSRCUNKNOWTM telemetry.
 *
 * Decode the 8 bits CALIBSRCUNKNOWTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry CALIBSRCUNKNOWTM telemetry buffer.
 */
	void decodeCALIBSOURCES_CALIBSRCUNKNOWTM(quint8*);
/** \@brief Decode the PLATFORMCONTROLERTM telemetry.
 *
 * Decode the 8 bits PLATFORMCONTROLERTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry PLATFORMCONTROLERTM telemetry buffer.
 */
	void decodePLATFORMCONTROLER_PLATFORMCONTROLERTM(quint8* telemetry);
/** \@brief Decode the PLATFORMAZMOTORTM telemetry.
 *
 * Decode the 8 bits PLATFORMAZMOTORTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry PLATFORMAZMOTORTM telemetry buffer.
 */
	void decodePLATFORMMOTORS_PLATFORMAZMOTORTM(quint8*);
/** \@brief Decode the PLATFORMELMOTORTM telemetry.
 *
 * Decode the 8 bits PLATFORMELMOTORTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry PLATFORMELMOTORTM telemetry buffer.
 */
	void decodePLATFORMMOTORS_PLATFORMELMOTORTM(quint8*);
/** \@brief Decode the GPSTM telemetry.
 *
 * Decode the 8 bits GPSTM telemetry buffer and update the TParameters instance.
 * \@param [in] telemetry GPSTM telemetry buffer.
 */
	void decodeGPS_GPSTM(quint8*);

    protected:
        TParameters* _parameters;
        TVirtualDecommutation* _Decommutation;
    };
    
#endif // TTELEMETRYDECODE_H    