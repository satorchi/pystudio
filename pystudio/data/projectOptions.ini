[General]
nbSubsys=11
subsysType0=MultiNetQuicDevice
subsysName0=MultiNetQuicManager
subsysId0=2
subsysAck0=2
subsysType1=UDP
subsysName1=RfSwitches
subsysId1=3
subsysAck1=0
currentId=16
subsysType2=THttpDevice
subsysName2=CFibers
subsysId2=8
subsysAck2=2
subsysType3=TCP
subsysName3=MMR3
subsysId3=4
subsysAck3=0
subsysType4=TCP
subsysName4=MGC3
subsysId4=5
subsysAck4=0
subsysType5=UDP
subsysName5=HWP
subsysId5=9
subsysAck5=2
subsysType6=UDP
subsysName6=PlatformControler
subsysId6=11
subsysAck6=0
subsysType7=Motors controler
subsysName7=PlatformMotors
subsysId7=12
subsysAck7=2
subsysType8=GPS serial port
subsysName8=GPS
subsysId8=13
subsysAck8=0
subsysType9=UDP
subsysName9=CalibSources
subsysId9=14
subsysAck9=0
subsysType10=UDP
subsysName10=extern hks
subsysId10=15
subsysAck10=0
subsysType11=GPS serial port
subsysName11=GPS
subsysId11=13
subsysAck11=0

[commands]
MULTINETQUICMANAGER\commands="customCommand\t,40 \t,10\t,4\t,asicNum,24,id,8,cn,8,corps,bytearray\t,{1}AA55 {2} {3} {4} FADA\t#custom command\n\n#commandes ASIC \nsetAsicParam\t\t,50\t,11\t,3,asicNum,24,address,4,value,6\t\t,{1}AA55 00 00 0{3}{2}FADA\t# configure asic parameter\nsetAsicApol\t\t,51\t,11\t,2,asicNum,24,value,6\t\t,{1}AA55 00 00 0{2}1FADA\t# analogic blocs polarisation\nsetAsicSpol\t\t,52\t,11\t,2,asicNum,24,value,6\t\t,{1}AA55 00 00 0{2}4FADA \t# squid polarisation\nsetAsicVicm\t\t,53\t,11\t,2,asicNum,24,value,6\t\t,{1}AA55 00 00 0{2}2FADA\t# tension de mode commun Vicm (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetAsicVocm\t\t,54\t,11\t,2,asicNum,24,value,6\t\t,{1}AA55 00 00 0{2}3FADA\t# tension de mode commun Vocm (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetAsicSetColumn\t\t,55\t,11\t,2,asicNum,24,startStopCol,4\t\t,{1}AA55 00 00 00{2}5FADA\t# circuit d'adressage: position initiale et finale colonne (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetAsicSelStartRow\t,56\t,11\t,2,asicNum,24,value,5\t\t,{1}AA55 00 00 0{2}6FADA\t# circuit d'adressage: position initiale ligne (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetAsicSelLastRow\t,57\t,11\t,2,asicNum,24,value,5\t\t,{1}AA55 00 00 0{2}7FADA\t# circuit d'adressage: position finale ligne (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetAsicRazb\t\t,59\t,11\t,1,asicNum,24\t\t\t,{1}AA55 10 00 0000 FADA\t# Envoi une pulse RAZb (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetAsicInib\t\t,60\t,11\t,1,asicNum,24\t\t\t,{1}AA55 10 00 0001 FADA\t# Envoi une pulse INIb (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\n#commandes carte FPGA\nsetFeedbackTable\t,1\t,265\t,2,asicNum,24,feedbackTable,128*16\t,{1}AA55 02 00{2}FADA\t# configure la table de feedback (128*16bits) pour l'asic asicNum (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetOffsetTable\t\t,20\t,265\t,2,asicNum,24,offsetTable,128*16\t\t,{1}AA55 22 00{2}FADA\t# configure la table d'offsets (128*16bits) pour l'asic asicNum (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetMask\t\t,3\t,135\t,2,asicNum,24,mask,125*8\t\t,{1}AA55 03 00{2}00FADA\t# configure le masque avec la table mask(128*8bits) pour l'asic asicNum (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetNSample\t\t,5\t,11\t,1,Nsample,16\t\t\t,0000 FF AA55 05 00{1}FADA\t# configure le Nsample pour tous les ASICs\n\nstartAcq\t\t,6\t,9\t,1,asicNum,24\t\t\t,{1}AA55 06 00FADA\t# demarrage de l'acquisition de la carte NetQuic (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nstopAcq\t\t,7\t,9\t,1,asicNum,24\t\t\t,{1}AA55 07 00FADA\t# arret de l'acquisition de la carte NetQuic (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetAcqMode\t\t,9\t,11\t,2,asicNum,24,testMode,16\t\t,{1}AA55 09 00{2}FADA \t# Used to configure acquisition mode : testmode = 0 => science mode, testmode = 1 => test pattern mode (see help, chapter \"specific project commands for asicNum description) \n\nresetNetquic\t\t,10\t,9\t,1,asicNum,24\t\t\t,{1}AA55 0A 00FADA\t# Reset acquisition board (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetCycleRawMode\t,11\t,11\t,2,asicNum,24,undersampling,16\t\t,{1}AA55 0B 00{2}FADA\t# bascule en mode raw signal cycle (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetAsicConf\t\t,13\t,11\t,3,asicNum,24,signalId,8,state,8\t\t,{1}AA55 0D 00{2}{3} FADA\t# configure some signals to 0 or 1  (see help, chapter \"specific project commands for asicNum description) \n\ngetStatus\t\t,14\t,9\t,1,asicNum,24\t\t\t,{1}AA55 0E 00FADA\t# demande le paquet status de la carte NetQuic (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetASICSerialLinkFrequency\t\t,16\t,11,1,serialFreq,8\t\t\t,0000 FF AA55 0F 0000{1}FADA\t# change la frequence du lien serie pour les commandes ASIC 0-200=> 0=>2kHz (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nconfigurePID\t\t,21\t,15\t,4,asicNum,24,P,16,I,16,D,16\t\t,{1}AA55 13 00{2}{3}{4}FADA\t# configure les parametres de la regul (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nactivatePID\t\t,22\t,11\t,2,asicNum,24,onOff,16\t\t,{1}AA55 14 00{2}FADA\t#active la regulation onOff = 1, desactive la regulation onOff = 0(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nsetFeedbackRelay\t,61\t,11\t,2,asicNum,24,bitmask,8\t\t,{1}AA55 30 0000{2}FADA\t# Relay configuration 0= pos 0, 1 = pos 1 (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetHeaterRelay\t\t,62\t,11\t,2,asicNum,24,bitmask,8\t\t,{1}AA55 31 0000{2}FADA\t# Relay configuration 0= pos 0, 1 = pos 1 (si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\n#setTESDAC\t\t,18\t,15\t,5,asicNum,24,shape,4,frequency,8,amplitude,16,offsetADU,16\t,{1}AA55 11 000{2}{3}{4}{5}FADA\t# Used to configure the signal injected to TES: with shape: 0 sinus, 1 triangle, 2 continu\n\nsetTESDAC_Continue\t,23\t,11\t,2,asicNum,24,offsetADU,16\t\t\t\t\t,{1}AA55 40 00{2}FADA\t\t# Used to configure the signal injected to TES with shape: continu\nsetTESDAC_Triangle\t,24\t,17\t,5,asicNum,24,offsetADU,16,increment,16,period,16,undersampling,16\t,{1}AA55 41 00{2}{3}{4}{5}FADA\t# Used to configure the signal injected to TES with shape: triangle\nsetTESDAC_Sinus\t,25\t,17\t,5,asicNum,24,offsetADU,16,amplitude,16,undersampling,16,increment,8\t,{1}AA55 42 00{2}{3}{4}{5}00FADA\t# Used to configure the signal injected to TES with shape: sinus\n"
RFSWITCHES\commands="toRfSwitches\t\t,0,1,1,txtMsg,string,{1} # send the txtMessage to switches, notice if the \\r character is missed at the end of message, it will be automatically added \n#SwitchesConfigureOneRegister\t,1,0,2,registerAddress,16,value,16 #build and send the command to configure one register\n#SwitchesReadOneRegister\t,1,0,1,registerAddress,16\n#SwitchesReadRegisters\t,1,0,2,registerAddress,16,nbRegisters,8"
dispatcher\commands="resetVOffset\t,1\t,3\t,1,asicNum,24\t\t\t,{1}\t#reset des valeurs VOffset (mise a 0) de l'asic specifie(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetVOffset\t,2\t,8\t,3,asicNum,24,pixelNum,8,voffset,float\t,{1}{2}{3}\t#configure la valeur VOffset pour le pixel (ou tous les pixels si pixelNum = 0xFF) de l'asic specifie(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetVOffsets\t,3\t,515\t,2,asicNum,24,voffset,128*float\t\t,{1}{2}\t#configure la valeur VOffset pour tous les pixels de l'asic specifie(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\n\nresetVout2IinCoeffs,4\t,3\t,1,asicNum,24\t\t\t,{1}\t#reset des valeurs Vout2Iin (mise a 1) de l'asic specifie(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetVout2IinCoeffs,5\t,11\t,3,asicNum,24,MinMfb,float,Rfb,float\t\t,{1}{2}{3}\t#configure la valeur Vout2Iin =  Min/Mfb* Rfb pour l'asic specifie(si asicNum = 0xFF, la commande est envoyée a tous les ASIC, si asic num < 16, la commande est envoyée a l'ASIC asicNum, pour envoyer à une liste d'ASICs utiliser les bits 8 à 23 pour specifier la liste, ex asicNum = 0x00FF00 configurera les asic 0 à 7)\nsetVout2IinsCoeffs,6\t,128\t,2,MinMfb,16*float, Rfb,16*float\t\t,{1}{2}\t#configure les valeurs out2Iin =  Min/Mfb* Rfb de tous les asics \n\nsetScientificDataTfUsed,7\t,1\t,1,tfused,8\t\t\t,{1}\t#applique la fonction de transfert : 0 => signal brut, 1 => Vout, 2 => Iin\n\nDataToExternHk\t\t,8,5,4,remoteIP,string_0,remotePort,16,commandId,8,data,bytearray,{1}{2}{3}{4} #remoteIP is a string\nTxtToExternHk\t\t,9,5,4,remoteIP,string_0,remotePort,16,commandId,8,data,string,{1}{2}{3}{4} #remoteIP is a string\n\n\n\n\n"
trash\commands="########################################\n########################################\n# commandes venant de CALIBSOURCES\n########################################\n########################################\ncustomCALIBSOURCESCommand\t,1 \t,1\t,1\t,customArray,bytearray\t\t,{1}\t\t# commande entierement customisable pour le sous système\n\nconfigureHighFrequencySource\t\t,2,1,1,frequency,double,01\t# configure frequency in Ghz\nconfigureLowFrequencySource\t\t,3,1,1,frequency,double,02\t# configure frequency in Ghz\n########################################\n########################################\n# commandes venant de IMACRT4\n########################################\n########################################\ntoIMARCTR4\t\t,0,1,1,txtMsg,string,{1} # send the txtMessage to IMACTR, notice if the \\n character is missed at the end of message, it will be automatically added \n########################################\n########################################\n# commandes venant de IMACRT3\n########################################\n########################################\ntoIMARCTR3\t\t,0,1,1,txtMsg,string,{1} # send the txtMessage to IMACTR, notice if the \\n character is missed at the end of message, it will be automatically added \n"
MMR3\commands="toMMR3\t\t,0,1,1,txtMsg,string,{1} # send the txtMessage to IMACTR, notice if the \\n character is missed at the end of message, it will be automatically added \n\n"
MGC3\commands="toMGC3\t\t,0,1,1,txtMsg,string,{1} # send the txtMessage to IMACTR, notice if the \\n character is missed at the end of message, it will be automatically added \n"
CFIBERS\commands="configureCFibers,1,29,16,periode,16,broche3State,8,broche4State,8,broche5State,8,ampFiber1,16,offsetFiber1,16,durationFiber1,16,ampFiber2,16,offsetFiber2,16,durationFiber2,16,ampFiber3,16,offsetFiber3,16,durationFiber3,16,ampFiber4,16,offsetFiber4,16,durationFiber4,16,{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}{16}"
HWP\commands="HWPCommand\t,1 \t,1\t,1\t,stringOrder,string\t\t,{1}\t\t# commande entierement customisable pour le sous système\n"
PLATFORMCONTROLER\commands="customCONTROLERMC405Command\t,1 \t,1\t,1\t,customArray,bytearray\t\t,{1}\t\t# commande entierement customisable pour le sous système\n"
PLATFORMMOTORS\commands="ConfigureAzMotor\t\t,0,2,1,msg,string,00{1} # send the txtMessage to Az motor, notice if the \\r character is missed at the end of message, it will be automatically added \nConfigureElMotor\t\t,1,2,1,msg,string,01{1} # send the txtMessage to El motor, notice if the \\r character is missed at the end of message, it will be automatically added \nConfigureMotors\t\t\t,2,3,2,azMsg,string_0,elMsg,string_0,03{1}{2} # send the azMsg to Az motor and elMsg to El motor, notice if the \\r character is missed at the end of message, it will be automatically added "
GPS\commands="customGPSCommand\t,1 \t,1\t,1\t,customArray,bytearray\t\t,{1}\t\t# commande entierement customisable pour le sous système\n"
CALIBSOURCES\commands="configureHighFrequencySource\t\t,2,9,1,frequency,double,01{1}\t# configure frequency in Ghz\nconfigureLowFrequencySource\t\t,3,9,1,frequency,double,02{1}\t# configure frequency in Ghz"
EXTERN_HKS\commands=

[telemetries]
QUBIC_HK\fromSubsystem=MULTINETQUICMANAGER
QUBIC_SUM\fromSubsystem=MULTINETQUICMANAGER
QUBIC_RAW\fromSubsystem=MULTINETQUICMANAGER
RFSWITCHES\fromSubsystem=RFSWITCHES
MMR3\fromSubsystem=MMR3
MGC3\fromSubsystem=MGC3
IMACRT3\fromSubsystem=HWP
IMACRT4\fromSubsystem=HWP
CFIBERS\fromSubsystem=CFIBERS
HWP\fromSubsystem=HWP
HWP_ACK\fromSubsystem=HWP
HWP_DATA\fromSubsystem=HWP
CALIBSRC\fromSubsystem=CALIBSOURCES
CALIBSRCFREQTM\fromSubsystem=PLATFORMCONTROLER
CALIBSRCUNKNOWTM\fromSubsystem=PLATFORMCONTROLER
CALIBSRCUNKNOWTMS\fromSubsystem=CALIBSOURCES
CALIBSRCUNKNOWTMQ\fromSubsystem=CALIBSOURCES
CALIBSRCUNKNOWTMR\fromSubsystem=CALIBSOURCES
PLATFORMTM\fromSubsystem=PLATFORMCONTROLER
PLATFORMCONTROLERTM\fromSubsystem=PLATFORMCONTROLER
PLATFORMAZMOTORTM\fromSubsystem=PLATFORMMOTORS
PLATFORMELMOTORTM\fromSubsystem=PLATFORMMOTORS
GPSTM\fromSubsystem=GPS
CALIBSRCTM\fromSubsystem=CALIBSOURCES
SWITCHES\fromSubsystem=RFSWITCHES
EXT_TM1\fromSubsystem=EXTERN_HKS

[decommutation]
CALIBSOURCES\uses=true
EXTERN_HKS\uses=false
CALIBSOURCES\definition=AA(corps)
EXTERN_HKS\definition=AA(id)(corps)
CALIBSOURCES\nbSize=16
EXTERN_HKS\nbSize=16
CALIBSOURCES\idSize=8
EXTERN_HKS\idSize=8
CALIBSOURCES\csSize=8
EXTERN_HKS\csSize=8
CALIBSOURCES\dataFieldSize="id = 0;\nreturn 9;"
EXTERN_HKS\dataFieldSize="if (id == 1)\nreturn 336;\nelse return 0;\n"
CALIBSOURCES\checksum="    unsigned int currentCS = 0;\nfor (int i=6/*début du calcul du CS*/; i < currentTmIndex; i++)\n   currentCS = currentCS ^ currentTM[i];\nreturn currentCS;\n"
EXTERN_HKS\checksum="    unsigned int currentCS = 0;\nfor (int i=6/*début du calcul du CS*/; i < currentTmIndex; i++)\n   currentCS = currentCS ^ currentTM[i];\nreturn currentCS;\n"
CALIBSOURCES\generatedcode="void TVirtualDecommutation::decommuteCALIBSOURCES(quint8 *tmBuffer, unsigned int tmSize)\n{\n    quint32 index = 0;\n    static quint32 state = 0;\n    static quint32 currentID = 0;\n    static quint32 currentNB = 0;\n    static bool firstFieldError = false; // used to avoid multiple first field error\n    \n    while (index < tmSize)\n    {\n        if (state != 1) // extraction du header ou EOT\n        {\n            _tmBufferCALIBSOURCES.append(tmBuffer[index]);\n            switch (state)\n            {\n            case 0:\n                if(tmBuffer[index]== 0xAA)\n                {\n                    firstFieldError = false;\n                    ++state;\n                 }\n                else\n                {// erreur\n                    if (firstFieldError == false)\n                    {\n                        setDecommutationError(DECOMM_HEADER_ERROR,currentID,state,tmBuffer[index]);\n                        firstFieldError = true;\n                    }\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferCALIBSOURCES.clear();\n                    currentNB = 0;\n                }\n                break;\n            }\n            index++;\n            if (state == 1) // on va ensuite decoder le corps, on determine la taille now\n            {\n                qint64 nb = dataFieldSizeCALIBSOURCES(currentNB, currentID, _tmBufferCALIBSOURCES.data(), _tmBufferCALIBSOURCES.size());\n                if (nb >= 0)\n                {\n                currentNB = nb;\n                if (currentNB == 0)\n                {\n                    decodeTelemetry(currentID,_tmBufferCALIBSOURCES.data(), _tmBufferCALIBSOURCES.size());\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferCALIBSOURCES.clear();\n                    currentNB = 0;\n                }\n                }\n                else\n                {// erreur\n                    if (nb == -1)\n                        setDecommutationError(DECOMM_SIZE_ERROR,currentID,state,0);\n                    else\n                        setDecommutationError(DECOMM_HEADER_ERROR,currentID,state,0);\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferCALIBSOURCES.clear();\n                    currentNB = 0;\n                    qDebug() << \"decommutation de CALIBSOURCES : ERREUR retournee par dataFieldSize\";\n                }\n            }\n        }\n        else\n        {\n            int sizeOfDataToCopy = qMin(currentNB,tmSize - index);\n            _tmBufferCALIBSOURCES.append(&tmBuffer[index],sizeOfDataToCopy);\n            currentNB = currentNB - sizeOfDataToCopy;\n            index = index + sizeOfDataToCopy;\n\n        if ( currentNB == 0)\n        {\n            decodeTelemetry(currentID,_tmBufferCALIBSOURCES.data(), _tmBufferCALIBSOURCES.size());\n            state = 0;\n            currentID = 0;\n            _tmBufferCALIBSOURCES.clear();\n            currentNB = 0;\n        }\n        }\n    }\n}"
EXTERN_HKS\generatedcode="void TVirtualDecommutation::decommuteEXTERN_HKS(quint8 *tmBuffer, unsigned int tmSize)\n{\n    quint32 index = 0;\n    static quint32 state = 0;\n    static quint32 currentID = 0;\n    static quint32 currentNB = 0;\n    static bool firstFieldError = false; // used to avoid multiple first field error\n    \n    while (index < tmSize)\n    {\n        if (state != 2) // extraction du header ou EOT\n        {\n            _tmBufferEXTERN_HKS.append(tmBuffer[index]);\n            switch (state)\n            {\n            case 0:\n                if(tmBuffer[index]== 0xAA)\n                {\n                    firstFieldError = false;\n                    ++state;\n                 }\n                else\n                {// erreur\n                    if (firstFieldError == false)\n                    {\n                        setDecommutationError(DECOMM_HEADER_ERROR,currentID,state,tmBuffer[index]);\n                        firstFieldError = true;\n                    }\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferEXTERN_HKS.clear();\n                    currentNB = 0;\n                }\n                break;\n            case 1:\n                currentID = (currentID << 8) | tmBuffer[index];\n                ++state;\n            break;\n            }\n            index++;\n            if (state == 2) // on va ensuite decoder le corps, on determine la taille now\n            {\n                qint64 nb = dataFieldSizeEXTERN_HKS(currentNB, currentID, _tmBufferEXTERN_HKS.data(), _tmBufferEXTERN_HKS.size());\n                if (nb >= 0)\n                {\n                currentNB = nb;\n                if (currentNB == 0)\n                {\n                    decodeTelemetry(currentID,_tmBufferEXTERN_HKS.data(), _tmBufferEXTERN_HKS.size());\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferEXTERN_HKS.clear();\n                    currentNB = 0;\n                }\n                }\n                else\n                {// erreur\n                    if (nb == -1)\n                        setDecommutationError(DECOMM_SIZE_ERROR,currentID,state,0);\n                    else\n                        setDecommutationError(DECOMM_HEADER_ERROR,currentID,state,0);\n                    state = 0;\n                    currentID = 0;\n                    _tmBufferEXTERN_HKS.clear();\n                    currentNB = 0;\n                    qDebug() << \"decommutation de EXTERN_HKS : ERREUR retournee par dataFieldSize\";\n                }\n            }\n        }\n        else\n        {\n            int sizeOfDataToCopy = qMin(currentNB,tmSize - index);\n            _tmBufferEXTERN_HKS.append(&tmBuffer[index],sizeOfDataToCopy);\n            currentNB = currentNB - sizeOfDataToCopy;\n            index = index + sizeOfDataToCopy;\n\n        if ( currentNB == 0)\n        {\n            decodeTelemetry(currentID,_tmBufferEXTERN_HKS.data(), _tmBufferEXTERN_HKS.size());\n            state = 0;\n            currentID = 0;\n            _tmBufferEXTERN_HKS.clear();\n            currentNB = 0;\n        }\n        }\n    }\n}"
CALIBSOURCES\tmMax=10
EXTERN_HKS\tmMax=10
