fichier de description version 2;;;;;;;;;;;;;;;;;;;;;
Ss;name;Parameter Description;Type[range]* (unit8, unit16, uint24, unit32, uint48, uint64,int8,int16,int24,int32,int48,int64,float,double,string,bytearr);Generate function transfer variable (yes:  variable créée automatiquement de type double (64 bits) et de meme range que variable source);options (noscript);DefVal (si autre que 0);QUBIC HK;QUBIC Sum;QUBIC Raw;Cfibers;Switches;mmr3;mgc3;hwp_ack;hwp_data;calibSrcFreqTM;calibSrcUnknowTM;PlatformControlerTM;PlatformAzMotorTM;PlatformElMotorTM;GPSTM
;;;;;;;0x1;0x2;0x3;0;0;0;0;0;1;0;1;0;0;1;0
NETQUIC;rate;;32[16];;;;;;;;;;;;;;;;;;
NETQUIC;HeaderTM_ASIC;;8;;;;4;4;4;;;;;;;;;;;;
NETQUIC;CN_Failure;;16[16];;;;;;;;;;;;;;;;;;
NETQUIC;CN_SciencePacket;;8[16];;;;;3:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
NETQUIC;CN_HKPacket;;8[16];;;;3:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
NETQUIC;CN_RawPacket;;8[16];;;;;;3:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;
NETQUIC;EchoCN;;8;;;;5;;;;;;;;;;;;;;
NETQUIC;HeaderTM_RSNum;;8;;;;;;5;;;;;;;;;;;;
NETQUIC;PIOValue;;16[16];;;;little:::30:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
NETQUIC;Rate;;64[16];;;;;;;;;;;;;;;;;;
NETQUIC;Status;;8[16];;;;17:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
ASIC;Apol;;8[16];yes;;;10:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
ASIC;Spol;;8[16];yes;;;11:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
ASIC;Vicm;;8[16];yes;;;12:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
ASIC;Vocm;;8[16];yes;;;13:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
ASIC;RowStart;;8[16];;;;14:::[NETQUIC_HeaderTM_ASIC&0xF];6:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
ASIC;RowEnd;;8[16];;;;15:::[NETQUIC_HeaderTM_ASIC&0xF];7:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
ASIC;ColumnRange;;8[16];;;;16:::[NETQUIC_HeaderTM_ASIC&0xF];5:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
ASIC;ColumnStart;;8[16];;;;;6:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
ASIC;ColumnEnd;;8[16];;;;;7:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
ASIC;NbPixelSelected;;8[16];;;;;;;;;;;;;;;;;;
ASIC;PixelAcqFrequency;;float[16];;;;;;;;;;;;;;;;;;
NETQUIC;TESSinusPhase;;16[16];;;;;10:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;
QUBIC;Nsample;last  nsample returned;16;;;1000;little:::6;little:::8;little:::6;;;;;;;;;;;;
QUBIC;relayStates;;8[16];;;;;;;;;;;;;;;;;;
QUBIC;Nsamples;all nsamples returned;16[16];;;1000;little:::6:::[NETQUIC_HeaderTM_ASIC&0xF];little:::8:::[NETQUIC_HeaderTM_ASIC&0xF];little:::6:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;
QUBIC;rawMaskSamples;nb samples in the mask;16[16];;;;;;;;;;;;;;;;;;
QUBIC;testPatternMode;;8[16];;;;2:::[NETQUIC_HeaderTM_ASIC&0xF];2:::[NETQUIC_HeaderTM_ASIC&0xF];2:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;
QUBIC;FrequencyASICSerialLink;;8[16];yes;;200;9:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;TESDACShape;;8[16];;;;18:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;TESDACFreq;;8[16];yes;;;19:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;TESDACAmplitude;;16[16];yes;;;little:::20:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;TESDACOffset;;int16[16];yes;;;little:::22:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;RawMode;;16[16];;;;little:::424:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;FeedbackDACValues;;(int16[128])[16];yes;;;little:::42:::if ((NETQUIC_Status[NETQUIC_HeaderTM_ASIC&0xF] & 0x40) == 0):::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;OffsetDACValues;;(int16[128])[16];yes;;;little:::42:::if (NETQUIC_Status[NETQUIC_HeaderTM_ASIC&0xF] & 0x40):::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;RawMasks;;(8[125])[16];;;;298:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;AllPixelsScientificData;current image;(int32[128])[16];;noscript;;;;;;;;;;;;;;;;
QUBIC;AllPixelsScientificData_TF;current image;(float[128])[16];;noscript;;;;;;;;;;;;;;;;
QUBIC;PreviewPixelScientificDataTimeLine;last Nsamples values per pixels;(float[30])[16][128];;noscript;;;;;;;;;;;;;;;;
QUBIC;PixelScientificDataTimeLineSize;size of current timeline (nsample dependant);16;;;;;;;;;;;;;;;;;;
QUBIC;PixelScientificDataTimeLine;last Nsamples values per pixels;(float[1500:QUBIC_PixelScientificDataTimeLineSize])[16][128];;noscript;;;;;;;;;;;;;;;;
QUBIC;PreviewRawDataSize;taille du raw signal de preview;8;;;;;;;;;;;;;;;;;;
QUBIC;PreviewRawData;raw signal de preview (max size = 100);(int16[100:QUBIC_PreviewRawDataSize])[16][128];;noscript;;;;;;;;;;;;;;;;
QUBIC;RawDataFromTM;Dernier raw signal retourné dans la TM (max size = 10000);int16[10000:QUBIC_Nsample];;noscript;;;;little:::8:::[size=QUBIC_Nsample];;;;;;;;;;;;
QUBIC;WorkingRawDataSize;taille du tableau de raw signal de travail;16;;;;;;;;;;;;;;;;;;
QUBIC;WorkingRawData;raw signal de travail (max size = 1000);(int16[1000:QUBIC_WorkingRawDataSize])[16][128];;noscript;;;;;;;;;;;;;;;;
QUBIC;WorkingRawData_TF;raw signal de travail (max size = 1000);(float[1000:QUBIC_WorkingRawDataSize])[16][128];;noscript;;;;;;;;;;;;;;;;
QUBIC;VOffset;used to calculate ;(float[128])[16];;;;;;;;;;;;;;;;;;
QUBIC;Rfb;Rfb;float[16];;;;;;;;;;;;;;;;;;
QUBIC;MinMfb;(Min/Mfb) ;float[16];;;;;;;;;;;;;;;;;;
QUBIC;Vout2Iin;coeff  (Min/Mfb) * Rfb;float[16];;;;;;;;;;;;;;;;;;
QUBIC;scientificDataTfUsed;0 = raw data, 1 = Vout, 2 = Iin;8;;;0;;;;;;;;;;;;;;;
QUBIC;FLL_State;;8[16];;;1;;;;;;;;;;;;;;;
QUBIC;FLL_P;;int16[16];;;1;little:::36:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;FLL_I;;int16[16];;;0;little:::38:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
QUBIC;FLL_D;;int16[16];;;0;little:::40:::[NETQUIC_HeaderTM_ASIC&0xF];;;;;;;;;;;;;;
Switches;Response;;string;;;;;;;;0;;;;;;;;;;
Switches;RegistersValues;;16[4096];;;;;;;;;;;;;;;;;;
MMR3;Msg;;string;;;;;;;;;;;;;;;;;;
MGC3;Msg;;string;;;;;;;;;;;;;;;;;;
MMR3;LastCmdResponse;;string;;;;;;;;;;;;;;;;;;
MGC3;LastCmdResponse;;string;;;;;;;;;;;;;;;;;;
MMR3;HKs;;(double)[36];;;;;;;;;;;;;;;;;;
MGC3;HKs;;(double)[46];;;;;;;;;;;;;;;;;;
CFIBERS;Response;;string;;;;;;;;;;;;;;;;;;
CFibers;Amplitudes;;16[4];;;;;;;;;;;;;;;;;;
CFibers;Offsets;;16[4];;;;;;;;;;;;;;;;;;
CFibers;Durations;;16[4];;;;;;;;;;;;;;;;;;
CFibers;BrochesFlag;;8[3];;;;;;;;;;;;;;;;;;
CFibers;A0;;16;;;;;;;;;;;;;;;;;;
CFibers;RealtimeClock;;32;;;;;;;;;;;;;;;;;;
HWP;velocity;;uint8;;;255;;;;;;;;;;;;;;;
HWP;direction;;uint8;;;255;;;;;;;;;;;;;;;
HWP;position;;uint8;;;255;;;;;;;;;;;;;;;
HWP;receivedMsg;;string;;;;;;;;;;;;;;;;;;
HWP;nbCommandCompleted;used to know when a command will be completed;uint16;;;0;;;;;;;;;;;;;;;
CalibSrc;hfFrequency;;double;;;0;;;;;;;;;;;;;;;
CalibSrc;lfFrequency;;double;;;0;;;;;;;;;;;;;;;
Platform;AcqCount;;16;;;;;;;;;;;;;;;little:::0;;;
Platform;PPS;;8;;;;;;;;;;;;;;;2;;;
Platform;Azimut;;16;;;;;;;;;;;;;;;little:::3;;;
Platform;Elevation;;16;;;;;;;;;;;;;;;little:::5;;;
Platform;DeltaTime;;16;;;;;;;;;;;;;;;little:::7;;;
Platform;Status;;8;;;;;;;;;;;;;;;9;;;
Platform;AzMotorResponse;;string;;;;;;;;;;;;;;;;;;
Platform;ElMotorResponse;;string;;;;;;;;;;;;;;;;;;
GPS;Date;;int64;;;0;;;;;;;;;;;;;;;
GPS;trameStr;;string;;;;;;;;;;;;;;;;;;
